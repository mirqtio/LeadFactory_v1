networks:
  test-network:
    driver: bridge

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: leadfactory_test
    ports:
      - "5432:5432"
    networks:
      - test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  stub-server:
    build:
      context: .
      dockerfile: Dockerfile.test
      target: test
    ports:
      - "5010:5010"
    environment:
      USE_STUBS: "true"
      PYTHONPATH: /app
      ENVIRONMENT: test
      SECRET_KEY: test-secret-key-for-ci
      CI: "true"
      DATABASE_URL: "sqlite:///tmp/stub.db"
    networks:
      - test-network
    command: python -m uvicorn stubs.server:app --host 0.0.0.0 --port 5010 --log-level info
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5010/health"]
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 20s

  test:
    build:
      context: .
      dockerfile: Dockerfile.test
      target: test
    depends_on:
      postgres:
        condition: service_healthy
      stub-server:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/leadfactory_test
      USE_STUBS: "true"
      STUB_BASE_URL: http://stub-server:5010
      PYTHONPATH: /app
      ENVIRONMENT: test
      SECRET_KEY: test-secret-key-for-ci
      CI: "true"
      # Ensure pytest can find modules
      PYTEST_CURRENT_TEST: "docker"
    networks:
      - test-network
    volumes:
      - ./coverage:/app/coverage
      - ./test-results:/app/test-results
      - ./.coveragerc:/app/.coveragerc:ro
    working_dir: /app
    command: >
      bash -c "
        set -e
        echo '=== Test Environment Setup ===' &&
        echo 'Creating output directories...' &&
        mkdir -p /app/coverage /app/test-results &&
        echo 'Python version:' && python --version &&
        echo 'Working directory:' && pwd &&
        echo 'Environment variables:' &&
        env | grep -E '(DATABASE_URL|USE_STUBS|STUB_BASE_URL|PYTHONPATH|CI)' | sort &&
        echo 'Installed packages:' &&
        pip list | grep -E '(pytest|coverage)' &&
        echo '' &&
        echo '=== Running Database Migrations ===' &&
        python scripts/run_migrations.py &&
        echo '' &&
        echo '=== Waiting for Stub Server ===' &&
        python scripts/wait_for_stub.py &&
        echo '' &&
        echo '=== Starting Test Execution ===' &&
        python -m pytest -v -m 'not slow and not phase_future' \
          --tb=short \
          --cov=. \
          --cov-report=html:/app/coverage/html \
          --cov-report=term \
          --cov-report=xml:/app/coverage/coverage.xml \
          --junitxml=/app/test-results/junit.xml \
          --cov-config=/app/.coveragerc \
          -p no:warnings \
          --durations=10 &&
        echo '' &&
        echo '=== Test Results ===' &&
        echo 'Coverage report location:' && ls -la /app/coverage/ 2>/dev/null || echo 'No coverage directory' &&
        echo 'Test results location:' && ls -la /app/test-results/ 2>/dev/null || echo 'No test-results directory' &&
        echo 'Copying coverage.xml to test-results...' &&
        cp /app/coverage/coverage.xml /app/test-results/coverage.xml 2>/dev/null || echo 'Could not copy coverage.xml' &&
        echo '=== Test execution completed successfully ==='
      "