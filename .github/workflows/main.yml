name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Run Tests in Docker
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build test image
      run: docker build -f Dockerfile.test -t leadfactory-test .
    
    - name: Run tests in Docker
      run: |
        docker-compose -f docker-compose.test.yml run --rm test \
          pytest -m "not slow and not phase_future" \
          --tb=short \
          --cov=. \
          --cov-report=term-missing \
          --cov-report=xml:coverage.xml \
          --junitxml=junit.xml \
          --cov-config=.coveragerc
    
    - name: Extract test results
      if: always()
      run: |
        # Get the container ID
        CONTAINER_ID=$(docker-compose -f docker-compose.test.yml ps -q test | head -1)
        # Copy test results if container exists
        if [ ! -z "$CONTAINER_ID" ]; then
          docker cp $CONTAINER_ID:/app/coverage.xml ./coverage.xml || true
          docker cp $CONTAINER_ID:/app/junit.xml ./junit.xml || true
        fi
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          junit.xml
          coverage.xml
    
    - name: Clean up
      if: always()
      run: docker-compose -f docker-compose.test.yml down -v

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        script: |
          cd /opt/leadfactory
          docker-compose pull
          docker-compose up -d --remove-orphans
          docker system prune -f