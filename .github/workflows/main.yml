name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Run Tests in Docker
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Create coverage directory
      run: mkdir -p coverage
    
    - name: Build test image
      run: |
        docker build -f Dockerfile.test -t leadfactory-test . || {
          echo "Docker build failed. Checking for common issues..."
          echo "Current directory contents:"
          ls -la
          echo "Dockerfile.test contents:"
          head -20 Dockerfile.test
          exit 1
        }
    
    - name: Start services
      run: |
        docker-compose -f docker-compose.test.yml up -d postgres stub-server
        
        # Wait for services to be ready
        echo "Waiting for PostgreSQL to be ready..."
        timeout 60 bash -c 'until docker-compose -f docker-compose.test.yml exec -T postgres pg_isready -U postgres; do sleep 1; done' || {
          echo "PostgreSQL failed to start. Container logs:"
          docker-compose -f docker-compose.test.yml logs postgres
          exit 1
        }
        
        echo "Waiting for stub server to be ready..."
        timeout 60 bash -c 'until curl -f http://localhost:5010/health; do sleep 1; done' || {
          echo "Stub server failed to start. Container logs:"
          docker-compose -f docker-compose.test.yml logs stub-server
          exit 1
        }
    
    - name: Run tests in Docker
      run: |
        docker-compose -f docker-compose.test.yml run --rm test \
          pytest -m "not slow and not phase_future" \
          --tb=short \
          --cov=. \
          --cov-report=term-missing \
          --cov-report=xml:coverage.xml \
          --junitxml=junit.xml \
          --cov-config=.coveragerc || {
          echo "Tests failed. Container logs:"
          docker-compose -f docker-compose.test.yml logs test
          exit 1
        }
    
    - name: Extract test results
      if: always()
      run: |
        # Create test results directory
        mkdir -p test-results
        
        # Get the test container ID (use the most recent one)
        CONTAINER_ID=$(docker-compose -f docker-compose.test.yml ps -q test | head -1)
        
        # Copy test results if container exists
        if [ ! -z "$CONTAINER_ID" ]; then
          echo "Extracting results from container $CONTAINER_ID"
          docker cp $CONTAINER_ID:/app/coverage.xml ./test-results/coverage.xml || echo "No coverage.xml found"
          docker cp $CONTAINER_ID:/app/junit.xml ./test-results/junit.xml || echo "No junit.xml found"
        else
          echo "No test container found, checking for files in mounted volume..."
          # Check if files exist in the mounted volume
          if [ -f "./coverage/coverage.xml" ]; then
            cp ./coverage/coverage.xml ./test-results/coverage.xml
          fi
          if [ -f "./coverage.xml" ]; then
            cp ./coverage.xml ./test-results/coverage.xml
          fi
          if [ -f "./junit.xml" ]; then
            cp ./junit.xml ./test-results/junit.xml
          fi
        fi
        
        # List what we found
        echo "Test results directory contents:"
        ls -la test-results/ || echo "No test-results directory"
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: always()
      with:
        file: ./test-results/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          test-results/
          coverage/
        retention-days: 5
    
    - name: Clean up
      if: always()
      run: docker-compose -f docker-compose.test.yml down -v

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 20
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 10
    
    steps:
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        timeout: 30s
        script: |
          set -e
          cd /opt/leadfactory
          
          # Check if docker-compose.yml exists
          if [ ! -f docker-compose.yml ]; then
            echo "docker-compose.yml not found in /opt/leadfactory"
            exit 1
          fi
          
          # Pull latest images
          docker-compose pull || echo "Some images failed to pull, continuing..."
          
          # Deploy with health check
          docker-compose up -d --remove-orphans
          
          # Wait for services to be ready
          sleep 10
          
          # Check if main service is running
          if ! docker-compose ps | grep -q "Up"; then
            echo "Services failed to start properly"
            docker-compose logs --tail=50
            exit 1
          fi
          
          # Clean up old images
          docker system prune -f