name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Run Tests in Docker
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Create coverage directory
      run: mkdir -p coverage
    
    - name: Build test image
      run: |
        docker build -f Dockerfile.test -t leadfactory-test . || {
          echo "Docker build failed. Checking for common issues..."
          echo "Current directory contents:"
          ls -la
          echo "Dockerfile.test contents:"
          head -20 Dockerfile.test
          exit 1
        }
    
    - name: Start services
      run: |
        docker compose -f docker-compose.test.yml up -d postgres stub-server
        
        # Wait for services to be ready
        echo "Waiting for PostgreSQL to be ready..."
        timeout 60 bash -c 'until docker compose -f docker-compose.test.yml exec -T postgres pg_isready -U postgres; do sleep 1; done' || {
          echo "PostgreSQL failed to start. Container logs:"
          docker compose -f docker-compose.test.yml logs postgres
          exit 1
        }
        
        echo "Waiting for stub server to be ready..."
        timeout 60 bash -c 'until docker compose -f docker-compose.test.yml exec -T stub-server curl -f http://localhost:5010/health 2>/dev/null; do echo "Waiting for stub server..."; sleep 2; done' || {
          echo "Stub server failed to start. Container logs:"
          docker compose -f docker-compose.test.yml logs stub-server
          echo "Checking stub server status:"
          docker compose -f docker-compose.test.yml ps stub-server
          exit 1
        }
        echo "✅ All services are ready"
    
    - name: Run tests in Docker
      run: |
        echo "Starting comprehensive test suite..."
        # Run tests without --rm to keep container for result extraction
        # Set a timeout to prevent hanging tests
        timeout 1200 docker compose -f docker-compose.test.yml run test || {
          EXIT_CODE=$?
          echo "Tests failed with exit code: $EXIT_CODE"
          echo "Checking container logs and diagnostics..."
          docker compose -f docker-compose.test.yml logs test --tail=100
          echo "Services status:"
          docker compose -f docker-compose.test.yml ps
          echo "Test container environment:"
          docker compose -f docker-compose.test.yml run --rm test env | grep -E "(DATABASE_URL|PYTHONPATH|USE_STUBS|ENVIRONMENT)"
          exit $EXIT_CODE
        }
        echo "✅ All tests passed successfully"
    
    - name: Extract test results
      if: always()
      run: |
        # Test results should be in mounted volumes
        echo "Checking for test results in mounted volumes..."
        
        # List coverage directory
        echo "Coverage directory contents:"
        ls -la ./coverage/ 2>/dev/null || echo "No coverage directory"
        
        # List test-results directory
        echo "Test-results directory contents:"
        ls -la ./test-results/ 2>/dev/null || echo "No test-results directory"
        
        # Ensure test-results directory exists for artifact upload
        mkdir -p test-results
        
        # Copy files if they exist
        if [ -f "./coverage/coverage.xml" ]; then
          cp ./coverage/coverage.xml ./test-results/
          echo "✅ Copied coverage.xml"
        fi
        
        if [ -f "./test-results/junit.xml" ]; then
          echo "✅ Found junit.xml"
        elif [ -f "./junit.xml" ]; then
          cp ./junit.xml ./test-results/
          echo "✅ Copied junit.xml from root"
        fi
        
        # Final check
        echo "Final test-results contents:"
        ls -la test-results/
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: always()
      continue-on-error: true
      with:
        file: ./test-results/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
        verbose: true
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          test-results/**
          coverage/**
        retention-days: 5
        if-no-files-found: warn
    
    - name: Clean up
      if: always()
      run: docker compose -f docker-compose.test.yml down -v

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 20
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 10
    
    steps:
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        timeout: 30s
        script: |
          set -e
          cd /opt/leadfactory
          
          # Check if docker-compose.yml exists
          if [ ! -f docker-compose.yml ]; then
            echo "docker-compose.yml not found in /opt/leadfactory"
            exit 1
          fi
          
          # Pull latest images
          docker-compose pull || echo "Some images failed to pull, continuing..."
          
          # Deploy with health check
          docker-compose up -d --remove-orphans
          
          # Wait for services to be ready
          sleep 10
          
          # Check if main service is running
          if ! docker-compose ps | grep -q "Up"; then
            echo "Services failed to start properly"
            docker-compose logs --tail=50
            exit 1
          fi
          
          # Clean up old images
          docker system prune -f