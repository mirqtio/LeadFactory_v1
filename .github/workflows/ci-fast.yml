name: Fast CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  fast-test:
    name: Ultra-Fast Test Suite (<5 min target)
    runs-on: ubuntu-latest
    timeout-minutes: 6  # Extended for Docker build overhead + test execution
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Create directories for artifacts
      run: |
        mkdir -p ./coverage ./test-results
        chmod 777 ./coverage ./test-results
    
    - name: Build fast test image with caching
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.test
        target: test
        push: false
        tags: leadfactory-test:fast
        cache-from: type=gha,scope=fast-test
        cache-to: type=gha,mode=max,scope=fast-test
        load: true
    
    - name: Run ultra-fast test suite in Docker (no infrastructure)
      run: |
        echo "ðŸš€ Starting ultra-fast test suite in Docker - target <3 minutes"
        
        # Run ultra-fast subset without any infrastructure setup
        # All pytest execution happens inside Docker containers
        timeout 240 docker run --rm \
          -e USE_STUBS=false \
          -e ENVIRONMENT=test \
          -e SKIP_INFRASTRUCTURE=true \
          -e ENABLE_GBP=false \
          -e ENABLE_PAGESPEED=false \
          -e ENABLE_SENDGRID=false \
          -e ENABLE_OPENAI=false \
          -e ENABLE_DATAAXLE=false \
          -e ENABLE_HUNTER=false \
          -e ENABLE_SEMRUSH=false \
          -e ENABLE_SCREENSHOTONE=false \
          -e DATABASE_URL="sqlite:///:memory:" \
          -e PYTHONPATH=/app \
          -e CI=true \
          -v $(pwd)/coverage:/app/coverage \
          -v $(pwd)/test-results:/app/test-results \
          -w /app \
          leadfactory-test:fast \
          python -m pytest \
            --tb=no \
            -q \
            -x \
            --maxfail=1 \
            --disable-warnings \
            -p no:warnings \
            --timeout=15 \
            --timeout-method=signal \
            -n 2 \
            --cov=. \
            --cov-report=xml:/app/coverage/coverage.xml \
            --cov-fail-under=0 \
            --junitxml=/app/test-results/junit.xml \
            tests/unit/d5_scoring/test_omega.py \
            tests/unit/d5_scoring/test_impact_calculator.py \
            tests/unit/d8_personalization/test_templates.py \
            tests/unit/design/test_token_extraction.py \
            tests/unit/design/test_validation_module.py \
          || {
          echo "::error::Ultra-fast test suite failed or exceeded 4-minute limit"
          exit 1
        }
        
        echo "âœ… Ultra-fast test suite completed successfully"
    
    - name: Extract fast test results
      if: always()
      run: |
        echo "Extracting fast test results..."
        
        # Ensure test-results directory exists for artifact upload
        mkdir -p test-results
        
        # Copy coverage report if it exists
        if [ -f "./coverage/coverage.xml" ]; then
          cp ./coverage/coverage.xml ./test-results/
          echo "âœ… Extracted coverage.xml"
        fi
        
        # Show final artifact contents
        echo "Fast test artifacts:"
        ls -la test-results/ 2>/dev/null || echo "No test results"
    
    - name: Upload fast test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: fast-test-results
        path: |
          test-results/**
          coverage/**
        retention-days: 3
        if-no-files-found: warn
    
    - name: Performance verification
      run: |
        echo "âœ… Fast CI Pipeline completed within 5-minute target"
        echo "This workflow focuses on critical path validation for rapid feedback"
        echo "Full test coverage is handled by the comprehensive CI Pipeline"