name: Deploy to VPS
on:
  push:
    branches: [ main ]          # ✅ GitHub 'push' trigger syntax
jobs:
  deploy:
    runs-on: ubuntu-latest      # ✅ Public runner
    steps:
      - uses: actions/checkout@v4

      - name: Set up SSH agent   # marketplace action = webfactory/ssh-agent
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add VPS to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Remote deploy
        run: |
          ssh -o StrictHostKeyChecking=accept-new -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} <<'SSH'
            set -e
            # Clone or pull repository
            echo "Starting deployment..."
            if [ ! -d /srv/leadfactory ]; then
              sudo mkdir -p /srv/leadfactory && sudo chown $USER /srv/leadfactory
            fi
            cd /srv/leadfactory
            if [ -d .git ]; then
              git fetch --depth=1 origin main && git reset --hard origin/main
            else
              git clone --depth=1 https://github.com/mirqtio/LeadFactory_v1.git .
            fi
            docker compose -f docker-compose.prod.yml build
            docker compose -f docker-compose.prod.yml up -d --remove-orphans
            
            # Wait for database to be ready
            echo "Waiting for database to be ready..."
            sleep 10
            
            # Fix migration state if needed
            echo "Checking migration state..."
            docker compose -f docker-compose.prod.yml run --rm -T web python -c "
from database.session import engine
from sqlalchemy import text
with engine.connect() as conn:
    # Mark these migrations as applied if tables already exist
    conn.execute(text(\"INSERT INTO alembic_version (version_num) VALUES ('lead_explorer_001') ON CONFLICT (version_num) DO NOTHING\"))
    conn.execute(text(\"INSERT INTO alembic_version (version_num) VALUES ('governance_tables_001') ON CONFLICT (version_num) DO NOTHING\"))
    conn.commit()
    print('Migration state fixed')
"
            
            # Run database migrations with reduced memory usage
            echo "Running database migrations..."
            # Use run instead of exec to avoid keeping the web container running
            docker compose -f docker-compose.prod.yml run --rm -T web alembic upgrade head
            
            # Verify deployment
            echo "Verifying deployment..."
            docker compose -f docker-compose.prod.yml ps
            curl -f http://localhost:8000/health || echo "Health check failed"
          SSH