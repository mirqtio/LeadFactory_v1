# Example Optimized CI Pipeline Configuration
# This file demonstrates how the CI pipeline would be structured with job separation
# DO NOT USE IN PRODUCTION - This is a proposal/example only

name: Optimized CI Pipeline (Example)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Fast Feedback - Critical and Smoke Tests
  fast-feedback:
    name: Fast Feedback Tests
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build test image (cached)
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.test
        target: test
        tags: leadfactory-test:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        load: true
    
    - name: Run critical tests
      run: |
        docker compose -f docker-compose.test.yml run --rm test \
          python -m pytest -v -m 'critical or smoke' --tb=short -n 4
    
    - name: Upload fast feedback results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: fast-feedback-results
        path: test-results/
        retention-days: 1

  # Job 2: Unit Tests - Core Business Logic
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: fast-feedback
    
    strategy:
      matrix:
        # Split unit tests for even better parallelization
        test-group:
          - "d0_gateway d1_targeting d2_sourcing"
          - "d3_assessment d4_enrichment"
          - "d5_scoring d6_reports d7_storefront"
          - "d8_personalization d9_delivery"
          - "d10_analytics d11_orchestration"
          - "api batch_runner design flows lead_explorer lineage"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Run unit tests for ${{ matrix.test-group }}
      run: |
        # Build test paths from matrix
        TEST_PATHS=""
        for dir in ${{ matrix.test-group }}; do
          if [ -d "tests/unit/$dir" ]; then
            TEST_PATHS="$TEST_PATHS tests/unit/$dir"
          fi
        done
        
        docker compose -f docker-compose.test.yml run --rm test \
          python -m pytest -v $TEST_PATHS -m 'not integration and not slow and not e2e' \
          --tb=short -n auto
    
    - name: Upload unit test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-tests-${{ strategy.job-index }}-results
        path: test-results/
        retention-days: 1

  # Job 3: Integration Tests - Database and External Services
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: fast-feedback
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Start services
      run: |
        docker compose -f docker-compose.test.yml up -d postgres stub-server
        
        # Wait for services
        timeout 60 bash -c 'until docker compose -f docker-compose.test.yml exec -T postgres pg_isready -U postgres; do sleep 1; done'
        timeout 60 bash -c 'until docker compose -f docker-compose.test.yml exec -T stub-server curl -f http://localhost:5010/health; do sleep 2; done'
    
    - name: Run integration tests
      run: |
        docker compose -f docker-compose.test.yml run --rm test \
          python -m pytest -v -m 'integration' --tb=short -n 2
    
    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-tests-results
        path: test-results/
        retention-days: 1
    
    - name: Clean up
      if: always()
      run: docker compose -f docker-compose.test.yml down -v

  # Job 4: Full Validation with Coverage
  full-validation:
    name: Full Test Suite & Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [unit-tests, integration-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Create coverage directory
      run: mkdir -p coverage test-results
    
    - name: Start services
      run: |
        docker compose -f docker-compose.test.yml up -d postgres stub-server
        
        # Wait for services
        timeout 60 bash -c 'until docker compose -f docker-compose.test.yml exec -T postgres pg_isready -U postgres; do sleep 1; done'
        timeout 60 bash -c 'until docker compose -f docker-compose.test.yml exec -T stub-server curl -f http://localhost:5010/health; do sleep 2; done'
    
    - name: Run full test suite with coverage
      run: |
        docker compose -f docker-compose.test.yml run --rm test \
          python -m pytest -v -m 'not slow and not phase_future' \
          --tb=short \
          --cov=. \
          --cov-report=html:/app/coverage/html \
          --cov-report=term \
          --cov-report=xml:/app/coverage/coverage.xml \
          --junitxml=/app/test-results/junit.xml \
          -n auto
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: always()
      with:
        file: ./coverage/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: full-validation-results
        path: |
          test-results/**
          coverage/**
        retention-days: 5
    
    - name: Clean up
      if: always()
      run: docker compose -f docker-compose.test.yml down -v

  # Job 5: Build Docker Image (unchanged)
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: full-validation
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    timeout-minutes: 20
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

  # Summary Job - Aggregate results
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [fast-feedback, unit-tests, integration-tests, full-validation]
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: all-results
    
    - name: Generate summary
      run: |
        echo "# Test Execution Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## Job Results" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status | Duration |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|----------|" >> $GITHUB_STEP_SUMMARY
        echo "| Fast Feedback | ${{ needs.fast-feedback.result }} | < 1 min |" >> $GITHUB_STEP_SUMMARY
        echo "| Unit Tests | ${{ needs.unit-tests.result }} | ~5 min |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | ${{ needs.integration-tests.result }} | ~10 min |" >> $GITHUB_STEP_SUMMARY
        echo "| Full Validation | ${{ needs.full-validation.result }} | ~15 min |" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Benefits of Optimized Pipeline" >> $GITHUB_STEP_SUMMARY
        echo "- âš¡ Fast feedback on critical tests" >> $GITHUB_STEP_SUMMARY
        echo "- ðŸš€ Parallel execution reduces total time" >> $GITHUB_STEP_SUMMARY
        echo "- ðŸŽ¯ Targeted re-runs for failed jobs" >> $GITHUB_STEP_SUMMARY
        echo "- ðŸ“Š Better visibility into test categories" >> $GITHUB_STEP_SUMMARY