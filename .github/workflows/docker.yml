name: Docker Build

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
    
    - name: Build test image
      run: docker build -f Dockerfile.test -t leadfactory:test .
    
    - name: Run essential tests in built image
      run: |
        docker run --rm \
          -e DATABASE_URL=sqlite:///tmp/test.db \
          -e USE_STUBS=true \
          -e ENVIRONMENT=test \
          -e SECRET_KEY=test-secret-key-for-ci \
          -e PYTHONPATH=/app \
          leadfactory:test \
          python -m pytest -x --tb=short tests/test_setup.py tests/unit/test_unit_models.py tests/unit/test_core.py --ignore=tests/test_docker_compose.py --ignore=tests/integration/
    
    - name: Build production image
      uses: docker/build-push-action@v4
      if: success()
      with:
        context: .
        file: ./Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max