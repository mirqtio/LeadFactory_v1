name: Ultra-Fast CI Pipeline (Optimized)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  ultra-fast-test:
    name: Ultra-Fast Test Suite (<2 min target)
    runs-on: ubuntu-latest
    timeout-minutes: 4  # Reduced from 6
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx with inline cache
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          image=moby/buildkit:v0.14.0
          network=host
    
    - name: Create optimized test directories
      run: |
        mkdir -p ./coverage ./test-results
        chmod 755 ./coverage ./test-results
    
    - name: Build optimized test image (multi-stage caching)
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.test.optimized
        target: ultra-fast
        push: false
        tags: leadfactory-test:ultra-fast
        cache-from: |
          type=gha,scope=deps-cache
          type=gha,scope=ultra-fast-cache
        cache-to: |
          type=gha,mode=max,scope=deps-cache,target=deps
          type=gha,mode=max,scope=ultra-fast-cache,target=ultra-fast
        load: true
        build-args: |
          BUILDKIT_INLINE_CACHE=1
    
    - name: Run ultra-fast test suite (no infrastructure)
      run: |
        echo "ðŸš€ Ultra-fast test suite - target <90 seconds"
        
        # Run minimal test subset with aggressive timeouts
        timeout 120 docker run --rm \
          -e ENVIRONMENT=test \
          -e CI=true \
          -e PYTHONPATH=/app \
          -e DATABASE_URL="sqlite:///:memory:" \
          -v $(pwd)/coverage:/app/coverage \
          -v $(pwd)/test-results:/app/test-results \
          -w /app \
          leadfactory-test:ultra-fast \
          python -m pytest \
            -x \
            --tb=no \
            -q \
            --disable-warnings \
            -p no:warnings \
            --timeout=10 \
            --timeout-method=signal \
            -n auto \
            --dist=loadfile \
            --cov=core \
            --cov=database \
            --cov-report=xml:/app/coverage/coverage.xml \
            --cov-fail-under=0 \
            --junitxml=/app/test-results/junit.xml \
            tests/unit/core/ \
            tests/unit/database/ \
          || {
          echo "::error::Ultra-fast test suite failed or exceeded 2-minute limit"
          exit 1
        }
        
        echo "âœ… Ultra-fast test suite completed in <2 minutes"
    
    - name: Upload ultra-fast test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ultra-fast-test-results
        path: |
          test-results/
          coverage/
        retention-days: 1
        if-no-files-found: warn
    
    - name: Performance verification
      run: |
        echo "âœ… Ultra-Fast CI completed within 2-minute target"
        echo "Focus: Critical core functionality with minimal overhead"