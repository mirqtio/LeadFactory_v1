name: Production Deployment

on:
  # Manual deployment trigger
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      
      skip_health_check:
        description: 'Skip health check after deployment'
        required: false
        default: false
        type: boolean
  
  # Automatic deployment on main branch (optional)
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.github/workflows/ci-consolidated.yml'
      - 'docs/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/leadfactory_v1

jobs:
  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set deployment variables
      run: |
        echo "DEPLOYMENT_ENV=${{ github.event.inputs.environment || 'production' }}" >> $GITHUB_ENV
        echo "DEPLOYMENT_TIME=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
        echo "DEPLOYMENT_SHA=${GITHUB_SHA:0:7}" >> $GITHUB_ENV
        echo "SKIP_HEALTH_CHECK=${{ github.event.inputs.skip_health_check || 'false' }}" >> $GITHUB_ENV
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push production image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.DEPLOYMENT_SHA }}
        platforms: linux/amd64
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Prepare deployment package
      run: |
        echo "📦 Preparing deployment package..."
        
        # Create deployment directory
        mkdir -p deployment
        
        # Copy essential files
        cp docker-compose.prod.yml deployment/
        cp -r scripts/ deployment/ 2>/dev/null || true
        
        # Create deployment info
        cat > deployment/deploy-info.json << EOF
        {
          "environment": "${{ env.DEPLOYMENT_ENV }}",
          "timestamp": "${{ env.DEPLOYMENT_TIME }}",
          "commit_sha": "${{ github.sha }}",
          "commit_short": "${{ env.DEPLOYMENT_SHA }}",
          "branch": "${{ github.ref_name }}",
          "triggered_by": "${{ github.event_name }}",
          "actor": "${{ github.actor }}"
        }
        EOF
        
        echo "✅ Deployment package prepared"
    
    - name: Trigger VPS Deployment
      run: |
        echo "🚀 Starting deployment to ${{ env.DEPLOYMENT_ENV }}..."
        echo "Deploying commit ${{ env.DEPLOYMENT_SHA }} to ${{ env.DEPLOYMENT_ENV }}"
        echo "Deployment time: ${{ env.DEPLOYMENT_TIME }}"
        echo ""
        echo "✅ Docker image pushed to registry:"
        echo "   ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        echo "   ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.DEPLOYMENT_SHA }}"
        echo ""
        echo "🔄 VPS will automatically detect and deploy the new image"
        echo "✅ Deployment trigger completed successfully"
    
    - name: Wait for VPS deployment
      if: env.SKIP_HEALTH_CHECK != 'true'
      run: |
        echo "🏥 Waiting for VPS to pull and deploy new image..."
        echo "⏳ VPS deployment typically takes 2-3 minutes"
        echo "📋 VPS will automatically:"
        echo "   1. Detect new image in registry"
        echo "   2. Pull the latest image"
        echo "   3. Restart containers with new image"
        echo "   4. Run database migrations if needed"
        echo "   5. Perform health checks"
        echo ""
        echo "✅ Registry push completed - VPS deployment in progress"
        echo "🌐 Monitor your VPS logs for deployment status"
    
    - name: Deployment notification
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "🎉 Deployment SUCCESS: ${{ env.DEPLOYMENT_ENV }} environment updated"
          echo "Commit: ${{ env.DEPLOYMENT_SHA }} (${{ github.sha }})"
          echo "Time: ${{ env.DEPLOYMENT_TIME }}"
          echo "Triggered by: ${{ github.actor }} via ${{ github.event_name }}"
        else
          echo "❌ Deployment FAILED: ${{ env.DEPLOYMENT_ENV }} environment"
          echo "Commit: ${{ env.DEPLOYMENT_SHA }} (${{ github.sha }})"
          echo "Check logs for rollback procedures"
        fi
    
    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: deployment-${{ env.DEPLOYMENT_ENV }}-${{ env.DEPLOYMENT_SHA }}
        path: |
          deployment/
        retention-days: 30