name: Production Deployment

on:
  # Manual deployment trigger
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      
      skip_health_check:
        description: 'Skip health check after deployment'
        required: false
        default: false
        type: boolean
  
  # Automatic deployment on main branch (optional)
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.github/workflows/ci-consolidated.yml'
      - 'docs/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/leadfactory_v1

jobs:
  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set deployment variables
      run: |
        echo "DEPLOYMENT_ENV=${{ github.event.inputs.environment || 'production' }}" >> $GITHUB_ENV
        echo "DEPLOYMENT_TIME=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
        echo "DEPLOYMENT_SHA=${GITHUB_SHA:0:7}" >> $GITHUB_ENV
        echo "SKIP_HEALTH_CHECK=${{ github.event.inputs.skip_health_check || 'false' }}" >> $GITHUB_ENV
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build production image (local only - bypass registry permissions)
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: |
          leadfactory:${{ env.DEPLOYMENT_SHA }}
          leadfactory:latest
        load: true
        platforms: linux/amd64
    
    - name: Prepare deployment package
      run: |
        echo "📦 Preparing deployment package..."
        
        # Create deployment directory
        mkdir -p deployment
        
        # Copy essential files
        cp docker-compose.prod.yml deployment/
        cp -r scripts/ deployment/ 2>/dev/null || true
        
        # Create deployment info
        cat > deployment/deploy-info.json << EOF
        {
          "environment": "${{ env.DEPLOYMENT_ENV }}",
          "timestamp": "${{ env.DEPLOYMENT_TIME }}",
          "commit_sha": "${{ github.sha }}",
          "commit_short": "${{ env.DEPLOYMENT_SHA }}",
          "branch": "${{ github.ref_name }}",
          "triggered_by": "${{ github.event_name }}",
          "actor": "${{ github.actor }}"
        }
        EOF
        
        echo "✅ Deployment package prepared"
    
    - name: Set up SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        # Show fingerprint of the key we're using (for verification)
        ssh-keygen -l -f ~/.ssh/deploy_key

    - name: Add VPS to known_hosts
      run: |
        ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to VPS
      run: |
        echo "🚀 Starting deployment to ${{ env.DEPLOYMENT_ENV }}..."
        echo "Deploying commit ${{ env.DEPLOYMENT_SHA }} to ${{ env.DEPLOYMENT_ENV }}"
        echo "Deployment time: ${{ env.DEPLOYMENT_TIME }}"
        
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=accept-new -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} <<'SSH'
          set -e
          # Clone or pull repository
          echo "Starting deployment..."
          if [ ! -d /srv/leadfactory ]; then
            sudo mkdir -p /srv/leadfactory && sudo chown $USER /srv/leadfactory
          fi
          cd /srv/leadfactory
          if [ -d .git ]; then
            git fetch --depth=1 origin main && git reset --hard origin/main
          else
            git clone --depth=1 https://github.com/mirqtio/LeadFactory_v1.git .
          fi
          docker compose -f docker-compose.prod.yml build
          docker compose -f docker-compose.prod.yml up -d --remove-orphans
          
          # Wait for database to be ready
          echo "Waiting for database to be ready..."
          sleep 10
          
          # Ensure alembic is initialized
          echo "Initializing alembic if needed..."
          docker compose -f docker-compose.prod.yml run --rm -T web alembic stamp base || true
          
          # Run database migrations with reduced memory usage
          echo "Running database migrations..."
          docker compose -f docker-compose.prod.yml run --rm -T web alembic upgrade head
          
          # Verify deployment
          echo "Verifying deployment..."
          docker compose -f docker-compose.prod.yml ps
          curl -f http://localhost:8000/health || echo "Health check failed"
        SSH
        
        echo "✅ Deployment to ${{ env.DEPLOYMENT_ENV }} completed successfully"
    
    - name: Health check
      if: env.SKIP_HEALTH_CHECK != 'true'
      run: |
        echo "🏥 Running post-deployment health checks..."
        
        ssh -i ~/.ssh/deploy_key -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} <<'SSH'
          cd /srv/leadfactory
          
          echo "Checking application health..."
          # Check if containers are running
          docker compose -f docker-compose.prod.yml ps
          
          echo "Checking database connectivity..."
          # Test database connection
          docker compose -f docker-compose.prod.yml exec -T db pg_isready -U leadfactory || echo "DB check failed"
          
          echo "Checking application endpoint..."
          # Wait a moment for app to be ready, then test health endpoint
          sleep 5
          curl -f http://localhost:8000/health || echo "Health endpoint check failed"
          
          echo "Checking container logs for errors..."
          # Check recent logs for any obvious errors
          docker compose -f docker-compose.prod.yml logs --tail=10 web
        SSH
        
        echo "✅ All health checks completed"
    
    - name: Deployment notification
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "🎉 Deployment SUCCESS: ${{ env.DEPLOYMENT_ENV }} environment updated"
          echo "Commit: ${{ env.DEPLOYMENT_SHA }} (${{ github.sha }})"
          echo "Time: ${{ env.DEPLOYMENT_TIME }}"
          echo "Triggered by: ${{ github.actor }} via ${{ github.event_name }}"
        else
          echo "❌ Deployment FAILED: ${{ env.DEPLOYMENT_ENV }} environment"
          echo "Commit: ${{ env.DEPLOYMENT_SHA }} (${{ github.sha }})"
          echo "Check logs for rollback procedures"
        fi
    
    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: deployment-${{ env.DEPLOYMENT_ENV }}-${{ env.DEPLOYMENT_SHA }}
        path: |
          deployment/
        retention-days: 30