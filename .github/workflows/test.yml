name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Create coverage directory
      run: mkdir -p coverage
    
    - name: Build test image
      run: |
        docker build -f Dockerfile.test -t leadfactory-test . || {
          echo "Docker build failed. Checking for common issues..."
          echo "Current directory contents:"
          ls -la
          echo "Dockerfile.test contents:"
          head -20 Dockerfile.test
          exit 1
        }
    
    - name: Start services
      run: |
        docker compose -f docker compose.test.yml up -d postgres stub-server
        
        # Wait for services to be ready
        echo "Waiting for PostgreSQL to be ready..."
        timeout 60 bash -c 'until docker compose -f docker compose.test.yml exec -T postgres pg_isready -U postgres; do sleep 1; done' || {
          echo "PostgreSQL failed to start. Container logs:"
          docker compose -f docker compose.test.yml logs postgres
          exit 1
        }
        
        echo "Waiting for stub server to be ready..."
        timeout 60 bash -c 'until curl -f http://localhost:5010/health; do sleep 1; done' || {
          echo "Stub server failed to start. Container logs:"
          docker compose -f docker compose.test.yml logs stub-server
          exit 1
        }
    
    - name: Run tests in Docker
      run: |
        # Run tests with better error handling
        docker compose -f docker compose.test.yml run --rm \
          -e ENVIRONMENT=test \
          -e USE_STUBS=true \
          -e CI=true \
          test \
          sh -c '
            echo "Setting up test environment..." &&
            export ENVIRONMENT=test &&
            export USE_STUBS=true &&
            export CI=true &&
            echo "Running database migrations..." &&
            python scripts/run_migrations.py &&
            echo "Starting test execution..." &&
            pytest -m "not slow and not phase_future" \
              --tb=short \
              --cov=. \
              --cov-report=term-missing \
              --cov-report=xml:coverage.xml \
              --junitxml=junit.xml \
              --cov-config=.coveragerc \
              -x \
              --maxfail=10 || {
              echo "Tests failed. Exit code: $?"
              exit 1
            }
          ' || {
          echo "Test execution failed. Container logs:"
          docker compose -f docker compose.test.yml logs --tail=100 test
          docker compose -f docker compose.test.yml logs --tail=50 postgres
          docker compose -f docker compose.test.yml logs --tail=50 stub-server
          exit 1
        }
    
    - name: Extract test results
      if: always()
      run: |
        # Create test results directory
        mkdir -p test-results
        
        # Get the test container ID (use the most recent one)
        CONTAINER_ID=$(docker compose -f docker compose.test.yml ps -q test | head -1)
        
        # Copy test results if container exists
        if [ ! -z "$CONTAINER_ID" ]; then
          echo "Extracting results from container $CONTAINER_ID"
          docker cp $CONTAINER_ID:/app/coverage.xml ./test-results/coverage.xml || echo "No coverage.xml found"
          docker cp $CONTAINER_ID:/app/junit.xml ./test-results/junit.xml || echo "No junit.xml found"
        else
          echo "No test container found, checking for files in mounted volume..."
          # Check if files exist in the mounted volume
          if [ -f "./coverage/coverage.xml" ]; then
            cp ./coverage/coverage.xml ./test-results/coverage.xml
          fi
          if [ -f "./coverage.xml" ]; then
            cp ./coverage.xml ./test-results/coverage.xml
          fi
          if [ -f "./junit.xml" ]; then
            cp ./junit.xml ./test-results/junit.xml
          fi
        fi
        
        # List what we found
        echo "Test results directory contents:"
        ls -la test-results/ || echo "No test-results directory"
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: always()
      with:
        file: ./test-results/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          test-results/
          coverage/
        retention-days: 5
    
    - name: Clean up
      if: always()
      run: docker compose -f docker compose.test.yml down -v

