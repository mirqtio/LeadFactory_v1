version: '3.8'

# LeadFactory Production Docker Compose - Task 093
# Production-ready container orchestration with health checks, restart policies, and monitoring

# Common Datadog environment variables
x-dd-env: &dd_env
  DD_AGENT_HOST: datadog
  DD_ENV: ${LF_ENV:-production}

services:
  # Main application service
  leadfactory-api:
    build:
      context: .
      dockerfile: Dockerfile
    image: leadfactory:production
    container_name: leadfactory-api
    restart: unless-stopped
    environment:
      <<: *dd_env
      ENVIRONMENT: production
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      SECRET_KEY: ${SECRET_KEY}
      GOOGLE_PAGESPEED_API_KEY: ${GOOGLE_PAGESPEED_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      PROMETHEUS_PORT: 9090
      GRAFANA_PORT: 3000
      SENTRY_DSN: ${SENTRY_DSN:-}
      SENTRY_TRACE_RATE: ${SENTRY_TRACE_RATE:-0.20}
      LF_ENV: ${LF_ENV:-production}
    ports:
      - "8000:8000"
      - "9090:9090"  # Prometheus metrics
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./config:/app/config:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.5'
        reservations:
          memory: 1G
          cpus: '0.5'
    networks:
      - leadfactory-network
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: leadfactory-postgres
    restart: unless-stopped
    environment:
      <<: *dd_env
      POSTGRES_DB: ${POSTGRES_DB:-leadfactory}
      POSTGRES_USER: ${POSTGRES_USER:-leadfactory}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: --encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/db_backup.sh:/usr/local/bin/db_backup.sh:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-leadfactory} -d ${POSTGRES_DB:-leadfactory}"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'
    networks:
      - leadfactory-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: leadfactory-redis
    restart: unless-stopped
    environment:
      <<: *dd_env
    command: redis-server --appendonly yes --appendfsync everysec --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    labels:
      com.datadoghq.ad.check_names: '["redisdb"]'
      com.datadoghq.ad.init_configs: '[{}]'
      com.datadoghq.ad.instances: |
        [
          {"host":"leadfactory-redis","port":"6379"}
        ]
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'
    networks:
      - leadfactory-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: leadfactory-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    ports:
      - "9091:9090"  # Avoid conflict with app metrics port
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alerts.yaml:/etc/prometheus/alerts.yaml:ro
      - prometheus_data:/prometheus
    depends_on:
      - leadfactory-api
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.1'
    networks:
      - leadfactory-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Grafana dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: leadfactory-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    ports:
      - "3002:3000"  # Changed to avoid port conflict
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/dashboards:/var/lib/grafana/dashboards:ro
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'
    networks:
      - leadfactory-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: leadfactory-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - leadfactory-api
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    networks:
      - leadfactory-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Datadog Agent
  datadog:
    image: gcr.io/datadoghq/agent:7
    container_name: datadog
    environment:
      - DD_API_KEY=${DATADOG_API_KEY}
      - DD_SITE=us5.datadoghq.com
      - DD_ENV=${LF_ENV:-production}
      - DD_LOGS_ENABLED=true
      - DD_APM_ENABLED=true
      - DD_PROCESS_AGENT_ENABLED=true
      - DD_CONTAINER_EXCLUDE=name:datadog
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc:/host/proc:ro
      - /sys/fs/cgroup:/host/sys/fs/cgroup:ro
    ports:
      - "8126:8126"
    restart: unless-stopped
    networks:
      - leadfactory-network

# Named volumes for persistent data
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Dedicated network for services
networks:
  leadfactory-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16