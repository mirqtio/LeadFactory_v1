# Research Context for P3-003

## Key Findings
- The audit trail implementation uses SQLAlchemy event listeners (after_insert, after_update, after_delete) on the Lead model
- The current implementation has a critical bug where event listeners are not triggering properly
- The code currently uses synchronous SQLAlchemy sessions (not async), so async-specific issues don't apply
- Event listeners are currently disabled in test environment (os.getenv('ENVIRONMENT') == 'test')
- The audit system logs all CRUD operations with SHA-256 checksums for tamper detection

## Authoritative Sources
- SQLAlchemy ORM Events Documentation: https://docs.sqlalchemy.org/en/20/orm/events.html
- SQLAlchemy Session Events Documentation: https://docs.sqlalchemy.org/en/20/orm/session_events.html
- Best practices article on audit trails: https://medium.com/@singh.surbhicse/creating-audit-table-to-log-insert-update-and-delete-changes-in-flask-sqlalchemy-f2ca53f7b02f

## Current Best Practices
- Use session-level events (before_flush) instead of mapper-level events for better control
- The before_flush event is recommended as it provides access to all changed objects in one place
- after_flush_postexec is better than after_flush when you need access to autogenerated values
- Event listeners should handle exceptions gracefully without breaking the main operation
- For audit trails, capture old values using SQLAlchemy's history tracking

## Common Pitfalls
- Mapper-level events (after_insert, after_update, after_delete) can be less reliable than session events
- Event listeners are disabled in test environment by default, making testing difficult
- Getting old values in after_update events requires careful handling of SQLAlchemy's state tracking
- Modifying collections during event processing can cause warnings
- Session.object_session(target) may return None in some contexts

## Recent Updates
- SQLAlchemy 2.0+ recommends using before_flush for comprehensive change tracking
- The SessionEvents.do_orm_execute() is a newer comprehensive hook for intercepting operations
- Modern audit trail implementations use session-level events for better reliability

## Implementation Recommendations
- Switch from mapper-level events to session-level before_flush event
- Remove the test environment check to allow proper testing
- Use SQLAlchemy's inspect() to properly track state changes
- Consider using after_flush_postexec if autogenerated IDs are needed
- Implement proper error handling and logging
- Add configuration option to enable/disable audit logging