[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "leadfactory"
version = "1.0.0"
description = "AI-powered lead generation and assessment platform"
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "fastapi>=0.100.0",
    "uvicorn>=0.23.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.11.0",
    "pydantic>=2.0.0",
    "redis>=4.6.0",
    "pytest>=7.4.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.3.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
    "coverage[toml]>=7.0.0",
    "pytest-mock>=3.11.0",
    "pytest-benchmark>=4.0.0",
]

[tool.setuptools.packages.find]
where = ["."]
include = ["*"]
exclude = ["tests*", "docs*", "scripts*", "alembic*"]

# Ruff configuration for PRP-1061 Quality Enforcement
[tool.ruff]
target-version = "py311"
line-length = 120
fix = true

# Select rule categories
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # Pyflakes
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "SIM",  # flake8-simplify
    "I",    # isort
    "N",    # pep8-naming
    "PD",   # pandas-vet
    "C4",   # flake8-comprehensions
    "ICN",  # flake8-import-conventions
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "TCH",  # flake8-type-checking
    "PTH",  # flake8-use-pathlib
]

# Zero-tolerance rules (PRP-1061 requirement)
ignore = [
    "E203",  # Whitespace before ':' (conflicts with Black)
    "E501",  # Line too long (handled by formatter, but ENFORCED in quality gate)
    "B008",  # Do not perform function calls in argument defaults
    "B904",  # Within except clause, raise exceptions with `raise ... from err`
    "N806",  # Variable name should be lowercase
    "N812",  # Lowercase imported as non-lowercase
    "PD901", # df is a bad variable name (common in pandas)
    "T201",  # print() statements (allowed in scripts)
    "T203",  # pprint() statements (allowed in debugging)
]

# Exclude patterns
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "alembic",
    "leadfactory.egg-info",
]

# Per-file ignores for specific patterns
[tool.ruff.per-file-ignores]
"tests/*" = [
    "F401",  # Unused imports in tests
    "F811",  # Redefinition of unused variable
    "F841",  # Local variable assigned but never used
    "E712",  # Comparison to True/False
    "PLR2004",  # Magic value used in comparison
    "S101",  # Use of assert
    "S105",  # Hardcoded password string
    "S106",  # Hardcoded password function argument
]
"*/conftest.py" = ["F401"]  # Unused imports in conftest files
"scripts/*" = [
    "T201",  # Print statements allowed in scripts
    "T203",  # pprint statements allowed in scripts
    "F401",  # Unused imports in scripts
]
"alembic/*" = [
    "E402",  # Module level import not at top of file
    "F401",  # Unused imports
]
"stubs/*" = ["ALL"]  # Stubs can ignore all rules

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.isort]
known-first-party = ["leadfactory"]
force-sort-within-sections = true

[tool.ruff.flake8-quotes]
inline-quotes = "double"
multiline-quotes = "double"

[tool.ruff.flake8-bugbear]
extend-immutable-calls = ["fastapi.Depends", "fastapi.Query", "fastapi.Path"]

# Black configuration (legacy support during transition)
[tool.black]
line-length = 120
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | alembic
  | leadfactory\.egg-info
)/
'''

# isort configuration (legacy support during transition)
[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["leadfactory"]
skip = [".venv", "venv", "alembic", "leadfactory.egg-info"]

# Coverage configuration (enhanced for PRP-1061)
[tool.coverage.run]
branch = true
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/.venv/*",
    "*/venv/*",
    "*/env/*",
    "*/migrations/*",
    "*/alembic/*",
    "*/stubs/*",
    "*/scripts/*",
    "*/__pycache__/*",
    "*/site-packages/*",
    "setup.py",
    "conftest.py",
    "*/docs/*",
    "*/examples/*",
    "*/PRPs/*",
    "*/temp_*/*",
    "*/.claude/*",
    "*/.github/*",
    "diagnose_*.py",
    "diagnose_*.sh",
    "phase_0_smoke_test.py",
    "validate_phase_0.py",
    "design/*",
    "flows/full_pipeline_flow.py",
    "core/cli.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
fail_under = 80  # PRP-1061 requirement: 80%+ coverage
sort = "Miss"

exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self\\.debug",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if False:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

[tool.coverage.xml]
output = "coverage.xml"

[tool.coverage.html]
directory = "coverage/html"

# Coverage per-file thresholds for critical modules (PRP-1061)
[tool.coverage.per_file_thresholds]
"core/*" = 90
"d0_gateway/*" = 85
"scripts/quality_gate.py" = 100
"profiles/*" = 90

# mypy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = [
    "alembic.*",
    "redis.*",
    "fakeredis.*",
    "pytest_benchmark.*",
]
ignore_missing_imports = true

# pytest configuration (enhanced for PRP-1061)
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-report=html:coverage/html",
    "--cov-fail-under=80",  # PRP-1061 requirement
    "--tb=short",
    "-n", "auto",
    "--dist", "worksteal",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
    "smoke: marks tests as smoke tests",
    "performance: marks tests as performance tests",
    "security: marks tests as security tests",
    "quality_gate: marks tests for quality gate functionality",
    "coverage_enforcement: marks tests for coverage enforcement",
    "lint_bot: marks tests for lint bot functionality",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]